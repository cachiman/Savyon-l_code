#!/usr/bin/env bash
set -euo pipefail

function usage {
  cat <<EOF
review [--verbose] [-c 10] [-m [base-branch]] [-b branch-name] additional context

Ask an llm to review code changes. Any additional arguments are provided as context.
Uses staged changes if present, otherwise uses unstaged changes.

-v, --verbose     print verbose output
-c, --context     change the context window on the diff sent to the llm. defaults to 10
-m, --merge-base  compare HEAD with the merge base (optionally specify the base branch, defaults to main)
-b, --branch      review changes in the specified remote branch (compared to main) without pulling it down

Depends on:
- llm: https://github.com/simonw/llm
- bat: https://github.com/sharkdp/bat (optional)

HOW TO USE

review with no arguments will review the code you have staged

  review

If you've merged code from the main branch, use -m

  review -m

If the main branch isn't called "main", or you want to review the diff between HEAD and some other branch, you can give it as an argument to -m. This command will review the diff betweenHEAD and the first commit it has in common with the development branch

  review -m development

If you want to review a branch that you may not have locally, use -b. I use this for reviewing github PRs; for example if a coworker created a branch called update-guid-format and I wanted to have the LLM review it, I'd use

  review -b update-guid-format

If you want to review a branch against something other than the main branch, combine -b and -m. This command would compare update-guid-format against the development branch instead of the main branch

  review -m development -b update-guid-format

A THOUGHT

LLMs can be useful, but the pairing of a thoughtful human with machine assistance is much more so. The LLM will often be lacking full context or misunderstand some change, so make sure to apply your brain to what it reports!
EOF
  exit "${1:-0}"
}

base_branch="main"
context=10
use_merge_base=false
branch_to_review=""
while true; do
  case ${1:-} in
    -v|--verbose)
      set -x
      shift
    ;;
    -h|--help)
      usage
    ;;
    -c|--context)
      shift
      context=$1
      shift
    ;;
    -m|--merge-base)
      use_merge_base=true
      shift
      # Check if next argument exists and doesn't start with a dash
      if [[ -n "${1:-}" && ! "$1" =~ ^- ]]; then
        base_branch="$1"
        shift
      fi
    ;;
    -b|--branch)
      shift
      if [[ -z "${1:-}" || "$1" =~ ^- ]]; then
        error "Branch name is required for -b/--branch option"
      fi
      branch_to_review="$1"
      shift
    ;;
    *)
      break
    ;;
  esac
done

readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly BOLD='\033[1m'
readonly RESET='\033[0m' # No Color

info() {
  printf "${BLUE}• %s${RESET}\n" "$1" >&2
}

error() {
  printf "${RED}❌ %s${RESET}\n" "$1" >&2
  usage 1
}

if ! command -v llm >/dev/null 2>&1; then
  # https://github.com/simonw/llm
  error "Missing required command llm. On mac: brew install llm"
fi

max_tokens=50000  # claude's limit is 100k
chars_per_token=4  # Rough estimation - adjust if needed
prompt="Please review this PR as if you were a senior engineer.

## Focus Areas
- Architecture and design decisions
- Potential bugs and edge cases
- Performance considerations
- Security implications
- Code maintainability and best practices
- Test coverage

## Review Format
- Start with a brief summary of the PR purpose and changes
- List strengths of the implementation
- Identify issues and improvement opportunities (ordered by priority)
- Provide specific code examples for suggested changes where applicable

Please be specific, constructive, and actionable in your feedback. Output the review in markdown format."

if [[ -n "${1:-}" ]]; then
    prompt="$prompt ${*}"
fi

# Check if there are changes in the index
set +e
git diff --cached --quiet 2>/dev/null
has_staged_changes=$?
set -e

if [ -n "$branch_to_review" ]; then
  # Review a remote branch without pulling it down
  info "Reviewing branch: $branch_to_review against $base_branch"
  git fetch origin "$branch_to_review" 2>/dev/null || error "Branch $branch_to_review not found"
  git fetch origin "$base_branch" 2>/dev/null || error "Base branch $base_branch not found"
  diff_output=$(git diff "origin/$base_branch"..."origin/$branch_to_review" --unified="$context")
elif [ "$use_merge_base" = true ]; then
  diff_output=$(git diff "$(git merge-base HEAD "$base_branch")"..HEAD --unified="$context")
elif [ $has_staged_changes -eq 1 ]; then
  diff_output=$(git diff --cached --unified="$context")
else
  diff_output=$(git diff --unified="$context")
fi

if [ -z "$diff_output" ]; then
  error "No changes found to review."
fi

# Estimate token count based on character count
char_count=${#diff_output}
estimated_tokens=$((char_count / chars_per_token))

# Reduce context if needed
if [ $estimated_tokens -gt $max_tokens ]; then
  # Calculate proportional reduction
  context=$((context * max_tokens / estimated_tokens))
  # Ensure minimum context of 1
  context=$((context > 0 ? context : 1))
  
  info "reducing context to $context to fit token limits"
  
  if [ -n "$branch_to_review" ]; then
    diff_output=$(git diff "origin/$base_branch"..."origin/$branch_to_review" --unified="$context")
  elif [ "$use_merge_base" = true ]; then
    diff_output=$(git diff "$(git merge-base HEAD "$base_branch")"..HEAD --unified="$context")
  elif [ "$has_staged_changes" -eq 1 ]; then
    diff_output=$(git diff --cached --unified="$context")
  else
    diff_output=$(git diff --unified="$context")
  fi
fi

if command -v bat >/dev/null 2>&1; then
  echo "$diff_output" | llm -s "$prompt" | bat --paging=never --style=plain --language=markdown
else
  echo "$diff_output" | llm -s "$prompt"
fi
exit_status=${PIPESTATUS[1]}

if [ "$exit_status" -eq 130 ]; then
  # User pressed Ctrl+C, exit silently
  exit 130
elif [ "$exit_status" -ne 0 ]; then
  echo "Error: LLM command failed." >&2
  exit 1
fi
