#!/usr/bin/env bash
set -euo pipefail

function usage {
  cat <<EOF
llm [--verbose] [-c 10] additional context

Ask the llm to review code changes. Any additional arguments are provided as context.
Uses staged changes if present, otherwise uses unstaged changes.

-v, --verbose   print verbose output
-c, --context   change the context window on the diff sent to the llm. defaults to 10
-m, --merge-base  compare HEAD with the merge base (optionally specify the base branch, defaults to main)
EOF
  exit "${1:-0}"
}

base_branch="main"
context=10
use_merge_base=false
while true; do
  case ${1:-} in
    -v|--verbose)
      set -x
      shift
    ;;
    -h|--help)
      usage
    ;;
    -c|--context)
      shift
      context=$1
      shift
    ;;
    -m|--merge-base)
      use_merge_base=true
      shift
      # Check if next argument exists and doesn't start with a dash
      if [[ -n "${1:-}" && ! "$1" =~ ^- ]]; then
        base_branch="$1"
        shift
      fi
    ;;
    *)
      break
    ;;
  esac
done

readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly BOLD='\033[1m'
readonly RESET='\033[0m' # No Color

info() {
  printf "${BLUE}• %s${RESET}\n" "$1" >&2
}

error() {
  printf "${RED}❌ %s${RESET}\n" "$1" >&2
  usage 1
}

if ! command -v llm >/dev/null 2>&1; then
  # https://github.com/simonw/llm
  error "Missing required command llm. On mac: brew install llm"
fi

if ! command -v bat >/dev/null 2>&1; then
  error "Missing required command bat. On mac: brew install bat"
fi

max_tokens=4000  # Adjust based on your LLM's limits
chars_per_token=4  # Rough estimation - adjust if needed
prompt="Please review this PR as if you were a senior engineer. Focus on architecture, potential bugs, edge cases, performance, and best practices. Be specific and constructive in your feedback."

if [[ -n "${1:-}" ]]; then
    prompt="$prompt ${*}"
fi

# Check if there are changes in the index
set +e
git diff --cached --quiet 2>/dev/null
has_staged_changes=$?
set -e

# use the stage if there are staged changes, otherwise use diff
if [ "$use_merge_base" = true ]; then
  diff_output=$(git diff "$(git merge-base HEAD "$base_branch")"..HEAD --unified="$context")
elif [ $has_staged_changes -eq 1 ]; then
  diff_output=$(git diff --cached --unified="$context")
else
  diff_output=$(git diff --unified="$context")
fi

if [ -z "$diff_output" ]; then
  error "No changes found to review."
fi

# Estimate token count based on character count
char_count=${#diff_output}
estimated_tokens=$((char_count / chars_per_token))

# Reduce context if needed
if [ $estimated_tokens -gt $max_tokens ]; then
  # Calculate proportional reduction
  context=$((context * max_tokens / estimated_tokens))
  # Ensure minimum context of 1
  context=$((context > 0 ? context : 1))
  
  info "reducing context to $context to fit token limits"
  
  if [ "$use_merge_base" = true ]; then
    diff_output=$(git diff "$(git merge-base HEAD "$base_branch")"..HEAD --unified="$context")
  elif [ "$has_staged_changes" -eq 1 ]; then
    diff_output=$(git diff --cached --unified="$context")
  else
    diff_output=$(git diff --unified="$context")
  fi
fi

echo "$diff_output" | llm -s "$prompt" | bat --paging=never --style=plain --language=markdown
exit_status=${PIPESTATUS[1]}

if [ "$exit_status" -eq 130 ]; then
  # User pressed Ctrl+C, exit silently
  exit 130
elif [ "$exit_status" -ne 0 ]; then
  echo "Error: LLM command failed." >&2
  exit 1
fi
